---
title: "Class 13: RNASeq Mini Project"
author: "Nicholas Yousefi"
format: gfm
---

The data for for hands-on session comes from GEO entry: GSE37704, which is associated with the following publication:

> Trapnell C, Hendrickson DG, Sauvageau M, Goff L et al. "Differential analysis of gene regulation at transcript resolution with RNA-seq". Nat Biotechnol 2013 Jan;31(1):46-53. PMID: 23222703

The authors report on differential analysis of lung fibroblasts in response to loss of the developmental transcription factor HOXA1. Their results and others indicate that HOXA1 is required for lung fibroblast and HeLa cell cycle progression. In particular their analysis show that "loss of HOXA1 results in significant expression level changes in thousands of individual transcripts, along with isoform switching events in key regulators of the cell cycle". For our session we have used their Sailfish gene-level estimated counts and hence are restricted to protein-coding genes only.

# RNA Seq Input Data

Again, I need two things:

- countData
- colData

```{r}
colData <- read.csv("GSE37704_metadata.csv", row.names=1)
head(colData)
```

```{r}
countData <- read.csv("GSE37704_featurecounts.csv", row.names=1)
head(countData)
```

There is an unwanted first column "length" in the countData. I will need to remove this first before going on to further analysis.

> Q. Complete the code below to remove the troublesome first column from `countData`

```{r}
counts <- countData[, -1]
head(counts)
```

Check that the column names in `counts` match the row names in `colData`.

```{r}
all(colnames(counts) == rownames(colData))
```

# Remove zero count genes

```{r}
head(counts)
```


There are lots of genes here with no count data - i.e. zero counts in all experiments. Let's remove these before running DESeq.

> Q. Complete the code below to filter countData to exclude genes (i.e. rows) where we have 0 read count across all samples (i.e. columns).

> Tip: What will rowSums() of countData return and how could you use it in this context?

```{r}
# Filter count data where you have 0 read count across all samples.
counts = counts[rowSums(counts) != 0, ]
head(counts)
```

How many genes do we have left?

```{r}
nrow(counts) # should be 15975
```

# Time to use DESeq

```{r, messages=FALSE}
library(DESeq2)
```

1st step: Setup the object required by DESeq

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                       colData=colData,
                       design=~condition)
```

Run the Analysis

```{r}
dds <- DESeq(dds)
dds
res <- results(dds, contrast=c("condition", "hoxa1_kd", "control_sirna"))
head(res)
```

> Q. Call the summary() function on your results to get a sense of how many genes are up or down-regulated at the default 0.1 p-value cutoff.

```{r}
summary(res)
```

# Volcano Plot

```{r}
plot(res$log2FoldChange, -log(res$padj))
```

> Q. Improve this plot by completing the below code, which adds color and axis labels

```{r}
mycols <- rep("gray", nrow(res))
mycols[abs(res$log2FoldChange) > 2] <- "gray"
inds <- (res$padj < 0.05) & (abs(res$log2FoldChange) > 2)
mycols[inds] <- "blue"

plot( res$log2FoldChange, -log(res$padj), col=mycols, xlab="Log2(FoldChange)", ylab="-Log(P-value)" )
abline(v=c(-2, 2))
abline(h=-log(0.05))
```

# Adding Gene Annotation

I am going to add the database identifiers I need for pathway analysis here.

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")

columns(org.Hs.eg.db)
```


> Q. Use the mapIDs() function multiple times to add SYMBOL, ENTREZID and GENENAME annotation to our results by completing the code below.

```{r}
res$symbol = mapIds(org.Hs.eg.db,
                    keys=row.names(res), 
                    keytype="ENSEMBL",
                    column="SYMBOL",
                    multiVals="first")

res$entrez = mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="ENTREZID",
                    multiVals="first")

res$name =   mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="GENENAME",
                    multiVals="first")

head(res)
```

Save my results so far to a CSV file.

> Q. Finally for this section let's reorder these results by adjusted p-value and save them to a CSV file in your current project directory.

```{r}
res = res[order(res$pvalue),]
write.csv(res, file="deseq_results.csv")
```

# Pathway Analysis

Again, we will use the `gage()` package and function with a focus first on KEGG and GO.

```{r}
library(gage)
library(gageData)

data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

# Examine the first 3 pathways
head(kegg.sets.hs, 3)
```

Recall that `gage()` wants only a vector of importance as input that has names in ENTREZ ID format.

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
head(keggres$less, 5)
```

Generate a colored pathway figure for hsa04110 Cell cycle.

```{r}
library(pathview)
pathview(gene.data=foldchanges, pathway.id="hsa04110")
```

![](hsa04110.pathview.png)

We can also make a PDF of our results:

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110", kegg.native=FALSE)
```

Let's just focus on the top 5 upregulated pathways. We need to extract the 8 character long ID from the rowname strings.

```{r}
keggrespathways <- rownames(keggres$greater)[1:5]
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
```

Now, let's use the `pathview()` function to draw plots for all of these pathways.

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```

Here are the figures it generated:

![](hsa04640.pathview.png)

![](hsa04630.pathview.png)

![](hsa00140.pathview.png)

![](hsa04142.pathview.png)

![](hsa04330.pathview.png)

> Q. Can you do the same procedure as above to plot the pathview figures for the top 5 down-reguled pathways?

```{r}
keggrespathwaysdownreg <- rownames(keggres$less)[1:5]
keggresidsdownreg = substr(keggrespathwaysdownreg, start=1, stop=8)
keggresidsdownreg
pathview(gene.data=foldchanges, pathway.id=keggresidsdownreg, species="hsa")
```

![](hsa04110.pathview.png)

![](hsa03030.pathview.png)

![](hsa03013.pathview.png)

![](hsa03440.pathview.png)

![](hsa04114.pathview.png)

# Gene Ontology (GO)

We can do similar analysis using the Gene Ontology database. `go.sets.hs` has all GO terms. `go.subs.hs` has indexes for the BP, CC, and MF ontologies. We will focus on BP.

```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
```

# Reactome Analysis

Reactome is a database that contains biological molecules and their relations to pathways and processes. We will analyze our list of differentially expressed genes using reactome.

First, let's save the genes that are signiifcantly expressed (i.e. p < 0.05) as a text file.

```{r}
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))
write.table(sig_genes, file="significant_genes.txt", row.names=F, col.names=F, quote=F)
```

We can upload this file to the reactome website (<https://reactome.org/PathwayBrowser/#TOOL=AT>) to perform pathway analysis. 

> Q: What pathway has the most significant “Entities p-value”? Do the most significant pathways listed match your previous KEGG results? What factors could cause differences between the two methods?

The pathway that has the most significant "Entities p-value" is the Endosomal/Vacuolar pathway. Most of the most significant pathways listed do not match my previous KEGG results. I think this is because for the reactome analysis, we filtered the differentially expressed genes only based on whether or not their padj was less than 0.05, not based on their fold changes. In fact, we never inputted the fold changes into the reactome analysis, so it could not take fold change into account at all. However, with the KEGG analysis, we did not filter by padj. The different methods of filtering significant data may have affected what results were considered significant.

```{r}
head(keggres$greater, 15)
print("--------")
head(keggres$less, 15)
```



